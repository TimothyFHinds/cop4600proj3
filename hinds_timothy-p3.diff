diff --git a/Makefile b/Makefile
index 4e88dcc..2957735 100644
--- a/Makefile
+++ b/Makefile
@@ -913,7 +913,7 @@ export mod_sign_cmd
 
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/
+core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/ classification/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
diff --git a/arch/x86/entry/syscalls/syscall_64.tbl b/arch/x86/entry/syscalls/syscall_64.tbl
index e93ef0b..03c693c 100644
--- a/arch/x86/entry/syscalls/syscall_64.tbl
+++ b/arch/x86/entry/syscalls/syscall_64.tbl
@@ -338,7 +338,8 @@
 329	common	pkey_mprotect		sys_pkey_mprotect
 330	common	pkey_alloc		sys_pkey_alloc
 331	common	pkey_free		sys_pkey_free
-
+332	common	get_classification	sys_get_classification
+333	common	set_classification	sys_set_classification
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
 # for native 64-bit operation.
diff --git a/classification/Makefile b/classification/Makefile
new file mode 100644
index 0000000..1e0b1ac
--- /dev/null
+++ b/classification/Makefile
@@ -0,0 +1,5 @@
+obj-y:=sysclassification.o
+
+classification.o: classification.c
+	gcc -o classification.o -c classification.c
+	ar cr libclassification.a classification.o
diff --git a/classification/sysclassification.c b/classification/sysclassification.c
new file mode 100644
index 0000000..ccab6e1
--- /dev/null
+++ b/classification/sysclassification.c
@@ -0,0 +1,140 @@
+#include <linux/types.h>
+#include <linux/stat.h>
+#include <linux/fs.h>	//filesystem
+#include "sysclassification.h"
+#include <linux/module.h>
+#include <linux/proc_fs.h>
+#include <linux/cred.h>
+#include <linux/unistd.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/sched.h>
+#include <linux/fcntl.h>
+#include <linux/syscalls.h>
+#include <linux/file.h>
+
+asmlinkage long sys_set_classification(int fd, int new_class)
+{
+	//1) This function checks if the user has permissions to WRITE to a file
+	//2) Then this function will change the requested file's i_classification # to new_class
+	if(fd < 0)	//check if fd is valid
+	{
+		return -1;
+	}
+	//use task_struct to get the uid and gid of the user running the process
+	struct task_struct *task = current;
+	int userid = task->cred->uid.val;
+	int groupid = task->cred->gid.val;
+
+	//fd 'f' is used to point to the file
+	//the 'inode' will point to the file's inode
+	struct fd f = fdget_pos(fd);
+	struct inode *inode;
+	inode = file_inode(f.file);
+
+	//Permissions
+	if(userid == 0)	//superuser can do what he/she pleases (check your pronouncs boys and girls)
+	{
+		inode->i_classification = new_class;
+		return inode->i_classification;
+	}
+
+	else if(inode->i_uid.val==userid)	//file owner  can write too
+	{
+		char rwPerm = ((inode->i_mode & S_IRWXU) ? 'w' : '-');	//this will return w on success and - on failure
+		char wPerm = ((inode->i_mode & S_IWUSR) ? 'w' : '-');
+		if(rwPerm == 'w' || wPerm == 'w')
+		{
+			inode->i_classification = new_class;	//set class to new_class
+			return inode->i_classification;		//return and done
+		}
+	}
+
+	else if(inode->i_gid.val == groupid)	//group
+	{
+		char rwPerm = ((inode->i_mode & S_IRWXG) ? 'w' : '-');
+		char wPerm = ((inode->i_mode & S_IWGRP) ? 'w' : '-');
+		if(rwPerm == 'w' || wPerm == 'w')
+		{
+			inode->i_classification = new_class;
+			return inode->i_classification;
+		}
+	} 	//other users
+		char readwrite = ((inode->i_mode & S_IRWXO) ? 'w' : '-');
+		char write = ((inode->i_mode & S_IWOTH) ? 'w' : '-');
+		if(readwrite == 'w' || write == 'w')
+		{
+			inode->i_classification = new_class;
+			return inode->i_classification;
+		}
+	 return -1;	//feelsbadman no permissions
+}
+
+asmlinkage long sys_get_classification(int fd)
+{
+	if(fd<0)
+	{
+		return -1;
+	}
+
+	struct task_struct *task = current;
+	int userid = task->cred->uid.val;
+	int groupid = task->cred->gid.val;
+
+	struct inode *inode;
+	struct fd f = fdget_pos(fd);
+	inode = file_inode(f.file);
+	//check file permissions
+	//logic behind comparing inode->i_mode to stat->st_mode
+	//st_mode = stat->mode
+	//stat->mode = i->mode
+	//stat->mode = inode->i_mode
+
+	//Permissions
+	if(userid == 0)
+	{
+		return inode->i_classification;
+	}
+	else if(inode->i_uid.val == userid)	//owner
+	{
+		char rwPerm = ((inode->i_mode & S_IRWXU) ? 'r' : '-');
+		char rPerm = ((inode->i_mode & S_IRUSR) ? 'r' : '-');
+		if(rwPerm == 'r' || rPerm == 'r')
+		{
+			return inode->i_classification;
+		}
+	}
+	else if(inode->i_gid.val == groupid)	//group
+	{
+		char rwPerm = ((inode->i_mode & S_IRWXG) ? 'r' : '-');
+		char rPerm = ((inode->i_mode & S_IRGRP) ? 'r' : '-');
+		if(rPerm == 'r' || rwPerm == 'r')
+		{
+			return inode->i_classification;
+		}
+	}
+		char rwPerm = ((inode->i_mode & S_IRWXO) ? 'r' : '-');
+		char rPerm = ((inode->i_mode & S_IROTH) ? 'r' : '-');
+		if(rwPerm == 'r' || rPerm == 'r')
+		{
+			return inode->i_classification;
+		}
+	  return -1;
+}
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
diff --git a/classification/sysclassification.h b/classification/sysclassification.h
new file mode 100644
index 0000000..6ede276
--- /dev/null
+++ b/classification/sysclassification.h
@@ -0,0 +1,7 @@
+#ifndef SYSCLASSIFICATION
+#define SYSCLASSIFICATION
+
+asmlinkage long sys_set_classification(int fd, int new_class);
+asmlinkage long sys_get_classification(int fd);
+
+#endif
diff --git a/fs/inode.c b/fs/inode.c
index 3844c31..923d660 100644
--- a/fs/inode.c
+++ b/fs/inode.c
@@ -156,6 +156,8 @@ int inode_init_always(struct super_block *sb, struct inode *inode)
 	inode->i_dir_seq = 0;
 	inode->i_rdev = 0;
 	inode->dirtied_when = 0;
+	//P3
+	inode->i_classification = 0;
 
 #ifdef CONFIG_CGROUP_WRITEBACK
 	inode->i_wb_frn_winner = 0;
diff --git a/include/linux/fs.h b/include/linux/fs.h
index 18bd249..3791be9 100644
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@ -607,6 +607,7 @@ struct inode {
 	kuid_t			i_uid;
 	kgid_t			i_gid;
 	unsigned int		i_flags;
+	int			i_classification;
 
 #ifdef CONFIG_FS_POSIX_ACL
 	struct posix_acl	*i_acl;
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index 91a740f..69f186c 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -902,5 +902,7 @@ asmlinkage long sys_pkey_mprotect(unsigned long start, size_t len,
 				  unsigned long prot, int pkey);
 asmlinkage long sys_pkey_alloc(unsigned long flags, unsigned long init_val);
 asmlinkage long sys_pkey_free(int pkey);
+asmlinkage long sys_set_classification(int fd, int new_class);
+asmlinkage long sys_get_classification(int fd);
 
 #endif
